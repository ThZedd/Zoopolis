package pt.iade.ei.zoopolis

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.viewModels
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import kotlinx.coroutines.flow.collectLatest
import pt.iade.ei.zoopolis.models.AnimalDTO
import pt.iade.ei.zoopolis.retrofit.AnimalsDTORepositoryImplementation
import pt.iade.ei.zoopolis.retrofit.RetrofitInstance
import pt.iade.ei.zoopolis.ui.menus.StartingMenu
import pt.iade.ei.zoopolis.ui.theme.ZoopolisTheme
import pt.iade.ei.zoopolis.viewmodel.AnimalDTOViewModel

class MainActivity : ComponentActivity() {

    private val viewModel by viewModels<AnimalDTOViewModel>(factoryProducer = {
        object : ViewModelProvider.Factory {
            override fun <T : ViewModel> create(modelClass: Class<T>): T {
                return AnimalDTOViewModel(AnimalsDTORepositoryImplementation(RetrofitInstance.api))
                        as T
            }
        }
    })

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            ZoopolisTheme {
                val animalsList = viewModel.animals.collectAsState().value
                val context = LocalContext.current
                LaunchedEffect(key1 = viewModel.showErrorToastChannel) {
                    viewModel.showErrorToastChannel.collectLatest { show ->
                        if (show) {
                            Toast.makeText(
                                context, "Erro ao carregar os animais", Toast.LENGTH_SHORT
                            ).show()

                        }
                    }
                }
                if (animalsList.isEmpty()) {
                    Box(
                        modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center
                    ) {
                        CircularProgressIndicator()
                    }
                } else {
                    LazyColumn(
                        modifier = Modifier.fillMaxSize(),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        contentPadding = PaddingValues(16.dp)
                    ) {
                        items(animalsList.size) { index ->
                            AnimalDTO(animalsList[index])
                            Spacer(modifier = Modifier.height(16.dp))
                        }
                    }

                }

            }
        }
    }
}

@Composable
fun AnimalDTO(animal: AnimalDTO) {

    Column(modifier = Modifier.clip(RoundedCornerShape(20.dp))
        .height(300.dp)
        .fillMaxWidth()
        .background(MaterialTheme.colorScheme.primaryContainer)
    ) {
        Text(text = "Animal name is: " + animal.name,
        modifier = Modifier.padding(16.dp))
        Text(text = "Animal ciname is: " + animal.ciName,
            modifier = Modifier.padding(16.dp))
        Text(text = "Animal description is: " + animal.description,
            modifier = Modifier.padding(16.dp))
    }
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainView() {
    ZoopolisTheme {
        StartingMenu()
    }
}
@Preview(showBackground = true)
@Composable
fun MainViewPreview() {
    ZoopolisTheme {
        MainView()
    }
}


@Composable
fun AnimalDTO(animal: AnimalDTO) {
    val negativeNumber = -1f
    val borderStrokeWidthSize = 1.45f

    OutlinedCard(
        modifier = Modifier
            .padding(vertical = 10.dp, horizontal = 8.dp)
            .size(width = 300.dp, height = 90.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface),
        border = BorderStroke(borderStrokeWidthSize.dp, Color.hsl(124f, 0.68f, 0.16f)),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 7.dp
        ),

    ){

        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ){
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Image(painter = painterResource(id = R.drawable.precos),
                    contentDescription = "",
                    contentScale = ContentScale.Crop,
                    modifier = Modifier
                        .fillMaxSize()

                )

                Box(
                    modifier = Modifier.padding(top = 65.dp)
                ) {
                    // Contorno - Desenha o texto em todas as direções para simular o contorno
                    Text(
                        text = animal.name,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp,
                        textAlign = TextAlign.Center,
                        color = Color(0xFF0D4311), // Cor do contorno
                        modifier = Modifier.offset(x = 1.dp, y = 2.dp)
                    )
                    Text(
                        text = animal.name,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp,
                        textAlign = TextAlign.Center,
                        color = Color(0xFF0D4311), // Cor do contorno
                        modifier = Modifier.offset(x = negativeNumber.dp, y = 0.dp)
                    )
                    Text(
                        text = animal.name,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp,
                        textAlign = TextAlign.Center,
                        color = Color(0xFF0D4311), // Cor do contorno
                        modifier = Modifier.offset(x = 0.dp, y = 1.dp)
                    )
                    Text(
                        text = animal.name,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp,
                        textAlign = TextAlign.Center,
                        color = Color(0xFF0D4311), // Cor do contorno
                        modifier = Modifier.offset(x = 0.dp, y = negativeNumber.dp)
                    )

                    // Texto principal
                    Text(
                        text = animal.name,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp,
                        textAlign = TextAlign.Center,
                        color = Color.White,
                        style = TextStyle(
                            shadow = Shadow(
                                color = Color.Black,
                                offset = Offset(4f, 4f), // Ajuste o deslocamento da sombra
                                blurRadius = 6f // Aumente o valor para uma sombra mais suave
                            )
                        )
                    )
                }
            }
        }
    }
}